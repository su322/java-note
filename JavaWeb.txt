Ajax：异步的JavaScript和XML，Axios对原生Ajax进行了封装，简化书写，快速开发
Nginx是一款轻量级的Web服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器。特点是占用内存少，并发能力强
Maven中的坐标是资源的唯一标识，通过该坐标可以唯一定位资源位置
依赖具有传递性，也可以<exclusions><exclusion>主动断开不需要的依赖 <scope>可以设置依赖的作用范围compile test provided runtime
Maven的生命周期是为了对所有的maven项目构建过程进行抽象和统一，生命周期有clean default site，在同一套生命周期中，当运行后面的阶段时，前面的阶段都会运行
HTTP请求数据格式：请求行、请求头、请求体
GET请求参数在请求行中，没有请求体，GET请求大小是有限制的；POST请求参数在请求体中，POST请求大小是没有限制的
HTTP响应格式：响应行、响应头、响应体
各种参数...各种注解 统一相应结果...

Tomcat：开源免费的轻量级web服务器，支持Servlet/JSP少量JavaEE规范，也被称为web容器、servlet容器，于springboot的起步依赖中内嵌
三层架构：Cotroller，控制层，接收请求，响应数据；Service，业务逻辑层，逻辑处理；dao，数据访问层（Data Access Object）（持久层）负责数据访问操作，包括数据的增删改查
面向接口编程不错
软件设计原则：高内聚低耦合
控制反转：Inverse Of Control，简称IOC，对象的创建控制权由程序自身转移到外部（容器），这种思想称为控制反转
依赖注入：Dependency Injection，简称DI，容器为应用程序提供运行时，所依赖的资源，称之为依赖注入
Bean对象：IOC容器中创建、管理的对象，称之为bean
步骤：实现类用@Component（可以用下面的衍生注解替换）交给IOC容器管理，要用到的其他类的对象用@AutoWired进行依赖注入
@Component的衍生注解：@Controller 标注在控制器类上（RestController已经包括了Controller），@Service 标注在业务类上，@Repository 标注在数据访问类上（由于与mybatis整合，用得少）
前面声明的注解要想生效，还需要被组件扫描注解@ComponentScan扫描，它虽然没有显式配置，但是实际上已经包含在了启动类声明注解中，默认扫描的范围是启动类所在包及其子包
如果同时写了多个@Service，会不知道自动装配哪一个Bean，就会报错，也可以在其中一个上面加上@Primary，就使这个Bean生效，或者可以在@Autoawired下面加上@Qualifier("想要使用的Bean，没指定名字默认是类名，首字母小写")，或者可以在即将创建对象的那行语句的上面加上@Resource("同样的")，不用写@Service
@Resource与@AutoWired的区别：前者是JDK提供的注解，后者是spring框架提供的注解；前者如果写name属性是是按照名称注入，不写是按照类型注入，后者默认是按照类型注入

关系型数据库（RDB）：建立在关系模型基础上，由多张相互连接的二维表组成的数据库
SQL：一门操作关系型数据库的编程语言，定义操作所有关系型数据库的统一标准。通常被分为四大类：DDL DML DQL DCL 语法太多...
参考：
select job,count(*) from tb_emp where entrydate<='2015-01-01' group by job having count(*) >= 2;
where和having区别：1、执行时机不同：where是分组之前进行过滤，不满足where条件，不参与分组；而having是分组之后对结果进行过滤 2、判断条件不同：where不能对聚合函数进行判断，而having可以
分组之后，查询的字段一般是聚合函数和分组字段，查询其他字段无意义
asc升序 desc降序
order by a, b desc; 先按照a排，a相同，再按照b排
limit 0,5 从索引0开始，展示五条12345
limit 5,5 从索引5开始，展示五条678910
起始索引=（查询页码-1）*每页显示记录数
分页查询是数据库的方言，不同的数据库有不同的实现
echarts
if(条件表达式，true取值，false取值)
case 表达式 when 值1 then 结果2 when 值2 then 结果2 ... else ... end
物理外键（foreign key）缺点：影响增删改的效率（需要检查外键关系），仅用于单节点数据库，不适用于分布式、集群场景，容易引发数据库的死锁问题，消耗性能
逻辑外键：在业务层逻辑中，解决外键关联
一对多（多的一方添加外键关联一的主键）、一对一、多对多（中间表）
笛卡尔积：两个集合的所有组合情况
多表查询中，需要消除无效的笛卡尔积
分类：	连接查询： 
			内连接：相当于查询A、B交集部分数据
			隐式 select tb_emp.name,tb_dept.name from tb_emp,tb_dept where tb_emp.dept_id = tb_dept.id;
			显式 select tb_emp.name,tb_dept.name from tb_emp inner join tb_dept on tb_emp.dept_id = tb_dept.id;
			外连接：
				左外连接：查询左表所有数据（包括交集）left join on
				右外连接：查询右表所有数据（包括交集）right join on
		子查询：
			标量子查询 where dept_id = (select id from tb_dept where name = '教研部');
			列子查询 where dept_id in (2,3);
			行子查询 where (entrydate,job)=('2007-01-01',2);
			表子查询 select e.*, d.name from (select * from tb_emp where entrydate > '2006-01-01') e, tb_dept d where e.dept_id = d.id;
上面写的只是部分举例

事务：一组操作的集合，是一个不可分割的工作单位，事务会把所有的操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败。
四大特性：
		原子性：事务是不可分割的最小单元，要么全部成功，要么全部失败
		一致性：事务完成时，必须使所有的数据都保持一致状态
		隔离性：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行
		持久性：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的
start transaction;
...
commit;
rollback;

索引是帮助数据库高效获取数据的数据结构，缺点是会占用存储空间，大大提高了查询效率，同时却也降低了insert、update、delete的效率
默认B+树（多路平衡搜索树）结构组织的索引
主键字段，在建表时，会自动创建主键索引。添加唯一约束时，数据库实际上会添加唯一索引

MyBatis是一款优秀的持久层框架，用于简化JDBC的开发
实体类变量用包装类创建，因为基本类型的默认值会造成干扰，而包装类为null不会干扰

JDBC(Java DataBase Connectivity)：使用java语言操作关系型数据库的一套API 硬编码，繁琐，资源浪费，性能降低
数据库连接池是个容器，负责分配、管理数据库连接，它允许应用程序重复使用一个现有的数据库连接，而不是重新建立一个，释放空闲时间超过最大空闲时间的连接，来避免因为没有释放连接而引起的数据库连接遗漏 最好的有阿里巴巴的druid 和springboot默认的hikari
Lombok是一个实用的Java类库，能通过注解的形式自动生成构造器、getter/setter、equals、hashcode、toString
等方法，并可以自动化生成日志变量，简化java开发、提高效率@Data @NoArgsContructor @AllArgsContructor 我感觉是看起来简洁

预编译SQL 性能更高 更安全（防止SQL注入）
使用#{...}占位符 执行SQL时，会将#{...}替换为?，生成预编译SQL，会自动设置参数值。使用时机：参数传递，都使用#{...}
使用${...}占位符 拼接SQL，直接将参数拼接在SQL语句中，存在SQL注入问题。使用时机：如果对表名、列表进行动态设置时使用

数据库数据到实体类的映射封装：起别名 手动结果映射 开启驼峰命名
concat 字符串拼接函数 concat('%', '#{name}', '%') 可以写在sql语句中