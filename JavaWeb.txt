Ajax：异步的JavaScript和XML，Axios对原生Ajax进行了封装，简化书写，快速开发
Nginx是一款轻量级的Web服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器。特点是占用内存少，并发能力强
Maven中的坐标是资源的唯一标识，通过该坐标可以唯一定位资源位置
依赖具有传递性，也可以<exclusions><exclusion>主动断开不需要的依赖 <scope>可以设置依赖的作用范围compile test provided runtime
Maven的生命周期是为了对所有的maven项目构建过程进行抽象和统一，生命周期有clean default site，在同一套生命周期中，当运行后面的阶段时，前面的阶段都会运行
HTTP请求数据格式：请求行、请求头、请求体
GET请求参数在请求行中，没有请求体，GET请求大小是有限制的；POST请求参数在请求体中，POST请求大小是没有限制的
HTTP响应格式：响应行、响应头、响应体
各种参数...各种注解 统一相应结果...

Tomcat：开源免费的轻量级web服务器，支持Servlet/JSP少量JavaEE规范，也被称为web容器、servlet容器，于springboot的起步依赖中内嵌
三层架构：Cotroller，控制层，接收请求，响应数据；Service，业务逻辑层，逻辑处理；dao，数据访问层（Data Access Object）（持久层）负责数据访问操作，包括数据的增删改查
面向接口编程不错
软件设计原则：高内聚低耦合
控制反转：Inverse Of Control，简称IOC，对象的创建控制权由程序自身转移到外部（容器），这种思想称为控制反转
依赖注入：Dependency Injection，简称DI，容器为应用程序提供运行时，所依赖的资源，称之为依赖注入
Bean对象：IOC容器中创建、管理的对象，称之为bean
步骤：实现类用@Component（可以用下面的衍生注解替换）交给IOC容器管理，要用到的其他类的对象用@AutoWired进行依赖注入
@Component的衍生注解：@Controller 标注在控制器类上（RestController已经包括了Controller），@Service 标注在业务类上，@Repository 标注在数据访问类上（由于与mybatis整合，用得少）
前面声明的注解要想生效，还需要被组件扫描注解@ComponentScan扫描，它虽然没有显式配置，但是实际上已经包含在了启动类声明注解中，默认扫描的范围是启动类所在包及其子包
如果同时写了多个@Service，会不知道自动装配哪一个Bean，就会报错，也可以在其中一个上面加上@Primary，就使这个Bean生效，或者可以在@Autoawired下面加上@Qualifier("想要使用的Bean，没指定名字默认是类名，首字母小写")，或者可以在即将创建对象的那行语句的上面加上@Resource("同样的")，不用写@Service
@Resource与@AutoWired的区别：前者是JDK提供的注解，后者是spring框架提供的注解；前者如果写name属性是是按照名称注入，不写是按照类型注入，后者默认是按照类型注入

关系型数据库（RDB）：建立在关系模型基础上，由多张相互连接的二维表组成的数据库
SQL：一门操作关系型数据库的编程语言，定义操作所有关系型数据库的统一标准。通常被分为四大类：DDL DML DQL DCL 语法太多...
参考：
select job,count(*) from tb_emp where entrydate<='2015-01-01' group by job having count(*) >= 2;
where和having区别：1、执行时机不同：where是分组之前进行过滤，不满足where条件，不参与分组；而having是分组之后对结果进行过滤 2、判断条件不同：where不能对聚合函数进行判断，而having可以
分组之后，查询的字段一般是聚合函数和分组字段，查询其他字段无意义
asc升序 desc降序
order by a, b desc; 先按照a排，a相同，再按照b排
limit 0,5 从索引0开始，展示五条12345
limit 5,5 从索引5开始，展示五条678910
起始索引=（查询页码-1）*每页显示记录数
分页查询是数据库的方言，不同的数据库有不同的实现
echarts
if(条件表达式，true取值，false取值)
case 表达式 when 值1 then 结果2 when 值2 then 结果2 ... else ... end
物理外键（foreign key）缺点：影响增删改的效率（需要检查外键关系），仅用于单节点数据库，不适用于分布式、集群场景，容易引发数据库的死锁问题，消耗性能
逻辑外键：在业务层逻辑中，解决外键关联
一对多（多的一方添加外键关联一的主键）、一对一、多对多（中间表）
笛卡尔积：两个集合的所有组合情况
多表查询中，需要消除无效的笛卡尔积
分类：	连接查询： 
			内连接：相当于查询A、B交集部分数据
			隐式 select tb_emp.name,tb_dept.name from tb_emp,tb_dept where tb_emp.dept_id = tb_dept.id;
			显式 select tb_emp.name,tb_dept.name from tb_emp inner join tb_dept on tb_emp.dept_id = tb_dept.id;
			外连接：
				左外连接：查询左表所有数据（包括交集）left join on
				右外连接：查询右表所有数据（包括交集）right join on
		子查询：
			标量子查询 where dept_id = (select id from tb_dept where name = '教研部');
			列子查询 where dept_id in (2,3);
			行子查询 where (entrydate,job)=('2007-01-01',2);
			表子查询 select e.*, d.name from (select * from tb_emp where entrydate > '2006-01-01') e, tb_dept d where e.dept_id = d.id;
上面写的只是部分举例

事务：一组操作的集合，是一个不可分割的工作单位，事务会把所有的操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败。
四大特性：
		原子性：事务是不可分割的最小单元，要么全部成功，要么全部失败
		一致性：事务完成时，必须使所有的数据都保持一致状态
		隔离性：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行
		持久性：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的
start transaction;
...
commit;
rollback;

索引是帮助数据库高效获取数据的数据结构，缺点是会占用存储空间，大大提高了查询效率，同时却也降低了insert、update、delete的效率
默认B+树（多路平衡搜索树）结构组织的索引
主键字段，在建表时，会自动创建主键索引。添加唯一约束时，数据库实际上会添加唯一索引

MyBatis是一款优秀的持久层框架，用于简化JDBC的开发
实体类变量用包装类创建，因为基本类型的默认值会造成干扰，而包装类为null不会干扰

JDBC(Java DataBase Connectivity)：使用java语言操作关系型数据库的一套API 硬编码，繁琐，资源浪费，性能降低
数据库连接池是个容器，负责分配、管理数据库连接，它允许应用程序重复使用一个现有的数据库连接，而不是重新建立一个，释放空闲时间超过最大空闲时间的连接，来避免因为没有释放连接而引起的数据库连接遗漏 最好的有阿里巴巴的druid 和springboot默认的hikari
Lombok是一个实用的Java类库，能通过注解的形式自动生成构造器、getter/setter、equals、hashcode、toString
等方法，并可以自动化生成日志变量，简化java开发、提高效率@Data @NoArgsContructor @AllArgsContructor 我感觉是看起来简洁

预编译SQL 性能更高 更安全（防止SQL注入）
使用#{...}占位符 执行SQL时，会将#{...}替换为?，生成预编译SQL，会自动设置参数值。使用时机：参数传递，都使用#{...}
使用${...}占位符 拼接SQL，直接将参数拼接在SQL语句中，存在SQL注入问题。使用时机：如果对表名、列表进行动态设置时使用

数据库数据到实体类的映射封装：起别名 手动结果映射 开启驼峰命名 （数据库的下划线格式映射成成员变量的小驼峰格式）
mybatis.configuration.map-underscore-to-camel-case=true

concat 字符串拼接函数 concat('%', '#{name}', '%') 可以写在sql语句中

XML映射文件的名称与Mapper接口名称一致，并且将XML映射文件和Mapper接口放置在相同包下（同包同名）。
XML映射文件的namespace属性为Mapper接口全限定名一致。
XML映射文件中sql语句的id与Mapper接口中的方法名一致，并保持返回类型一致（全类名）。

随着用户的输入或外部条件的变化而变化的SQL语句，我们称为动态SQL。
1. <if>
用于判断条件是否成立，如果条件为true，则拼接SQL。
形式:<if test="name != null">..</if>
2. <where>
where元素只会在子元素有内容的情况下才插入where子句，而且会自动去除子句的开头的AND或OR
3. <set>
动态地在行首插入SET关键字，并会删掉额外的逗号。（用在update语句中）

<foreach>
SQL语句：delete from emp where id in (1,2,3);
接口方法：
#批量删除
public void deleteBylds(List<Integer> ids);
XML映射文件：
<delete id="deleteBylds">
	delete from emp where id in
	<foreach collection="ids" item="id" separatqr="," open="(" close=")">
		#{id}
	</foreach>
</delete>

sql片段
<sql>：定义可重用的SQL片段。
<include>：通过属性refid，指定包含的sql片段。

开发规范-Restful
REST(Representational StateTransfer)：表述性状态转换，它是一种软件架构风格
URL定位资源，HTTP动词描述操作
REST是风格，是约定方式，约定不是规定，可以打破。
描述模块的功能通常使用复数，也就是加s的格式来描述，表示此类资源，而非单个资源。如：users、emps、books...

@slf4j 就可以用log.info了

impl：implementation 实现类集合，不是接口implements

/**回车 快速注释

条件分页查询：条件查询：动态SQL-XML映射文件 分页查询：PageHelper分页插件

uuid：通用唯一识别码 用于构造唯一的文件名
在SpringBoot中，文件上传，默认单个文件允许最大大小为1M。如果需要上传大文件，可以进行如下配置：
#配置单个文件最大上传大小
spring.servlet.multipart.max-file-size=10MB
#配置单个请求最大上传大小（一次请求可以上传多个文件）
spring.servlet.multipart.max-request-size=100MB

#启用mybatis日志输出
mybatis.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl

@Value注解通常用于外部配置的属性注入，具体用法为：@Value("${配置文件中的key)")

alt+鼠标左键拖动 可以拖从同一个位置开始的多行代码

SpringBoot提供了多种属性配置方式
1.application.properties

server.port=8080
server.address=127.0.0.1

推荐后面的
2.application.yml

server:
	port:8080
	address:127.0.0.1

3.application.yaml

server:
	port:8080
	address:127.0.0.1
	
yml
基本语法：
大小写敏感
数值前边必须有空格，作为分隔符
使用缩进表示层级关系，缩进时，不允许使用Tab键，只能用空格（idea中会自动将Tab转换为空格）
缩进的空格数目不重要，只要相同层级的元素左侧对齐即可
#表示注释，从这个字符一直到行尾，都会被解析器忽略

@ConfigurationProperties与 @Value
相同点
都是用来注入外部配置的属性的。
不同点
@Value注解只能一个一个的进行外部属性的注入
@ConfigurationProperties可以批量的将外部的属性配置注入到bean对象的属性中。

json格式要用实体类接收

会话：用户打开浏览器，访问web服务器的资源，会话建立，直到有一方断开连接，会话结束。在一次会话中可以包含多次请求和响应。
会话跟踪：一种维护浏览器状态的方法，服务器需要识别多次请求是否来自于同一浏览器，以便在同一次会话的多次请求间共享数据。

Cookie
优点：HTTP协议中支持的技术
缺点：
移动端APP无法使用Cookie
不安全，用户可以自己禁用cookie
Cookie不能跨域

跨域区分三个维度：协议、IP/域名、端口

Session
优点：存储在服务端，安全
缺点：
服务器集群环境下无法直接使用Session
Cookie的缺点

令牌技术
优点：
支持PC端、移动端
解决集群环境下的认证问题
减轻服务器端存储压力
缺点：需要自己实现

JWT
简介
全称:JSON Web Token (https://jwt.io/)
定义了一种简洁的、自包含的格式，用于在通信双方以json数据格式安全的传输信息。由于数字签名的存在，这些信息是可靠的。
组成:
第一部分：Header(头)，记录令牌类型、签名算法等。例如：{"alg":"HS256","type":"JWT"}
第二部分：Payload(有效载荷)，携带一些自定义信息、默认信息等。例如：{"id":"1","username":"Tom"}
第三部分：Signature(签名），防止Token被篡改、确保安全性。将header、payload,并加入指定秘钥，通过指定签名算法计算而来。

Base64:是一种基于64个可打印字符（A-Za-Z0-9+/）来表示二进制数据的编码方式。

场景：登录认证。
1.登录成功后，生成令牌
2.后续每个请求，都要携带JWT令牌，系统在每次请求处理之前，先校验令牌，通过后，再处理

JWT校验时使用的签名秘钥，必须和生成JWT令牌时使用的秘钥是配套的。
如果JWT令牌解析校验时报错，则说明JWT令牌被篡改或失效了，令牌非法。

思路
令牌生成：登录成功后，生成JWT令牌，并返回给前端。
令牌校验：在请求到达服务端后，对令牌进行统一拦截、校验。

概念：Filter 过滤器，是JavaWeb 三大组件(Servlet、Filter、Listener)之一。
过滤器可以把对资源的请求拦截下来，从而实现一些特殊的功能。
过滤器一般完成一些通用的操作，比如：登录校验、统一编码处理、敏感字符处理等。

1.定义Filter：定义一个类，实现Filter接口，并重写其所有方法。
2.配置Filter：Filter类上加@WebFilter注解，配置拦截资源的路径。引导类上加@ServletComponentScan开启Servlet组件支持。

执行流程：请求-->放行前逻辑-->放行-->资源-->放行后逻辑
一个web应用中，可以配置多个过滤器，这多个过滤器就形成了一个过滤器链。执行顺序可以想一下
顺序：注解配置的Filter，优先级是按照过滤器类名（字符串）的自然排序。

概念：Interceptor 拦截器 是一种动态拦截方法调用的机制，类似于过滤器。Spring框架中提供的，用来动态拦截控制器方法的执行。
作用：拦截请求，在指定的方法调用前后，根据业务需要执行预先设定的代码。

1.定义拦截器，实现HandlerInterceptor接口，并重写其所有方法。
2.注册拦截器 拦截路径的写法和过滤器有区别

Filter与 Interceptor 两种用一种就可以 都有的话顺序是前者在前，后者在后
接口规范不同：过滤器需要实现Filter接口，而拦截器需要实现Handlerlnterceptor接口。
拦截范围不同：过滤器Filter会拦截所有的资源，而Interceptor只会拦截Spring环境中的资源。

步骤
获取请求url。
判断请求url中是否包含login，如果包含，说明是登录操作，放行。
获取请求头中的令牌(token)。
判断令牌是否存在，如果不存在，返回错误结果（未登录）。
解析token，如果解析失败，返回错误结果（未登录）。
放行。

出现异常，该如何处理？
方案一：在Controller的方法中进行try...catch处理 代码臃触，不推荐
方案二：全局异常处理器 简单、优雅，推荐

全局异常处理器
@RestControllerAdvice = @RestController + @ResponseBody
@ExceptionHandler

示例：
@RestControllerAdvice
public class GlobalExceptionHandler{
	@ExceptionHandler(Exception.class)//捕获所有异常
	public Result ex(Exception ex) {
		ex.printStackTrace();
		return Result.error("对不起，操作失败,请联系管理员");
	}
}

注解：@Transactional
位置：业务（service）层的方法上、类上、接口上
作用：将当前方法交给spring进行事务管理，方法执行前，开启事务；成功执行完毕，提交事务；出现异常，回滚事务

#开启事务管理日志
logging:
level:
org.springframework.jdbc.support.jdbcTransactionManager: debug

默认情况下，只有出现RuntimeException才回滚异常。rollbackFor属性用于控制出现何种异常类型，回滚事务。
@Transactional(rollbackFor = Exception.class)

事务传播行为：指的就是当一个事务方法被另一个事务方法调用时，这个事务方法应该如何进行事务控制。
Transactional中的propagation参数
REQUIRED：大部分情况下都是用该传播行为即可。
REQUIRES_NEW：当我们不希望事务之间相互影响时，可以使用该传播行为。比如：下订单前需要记录日志，不论订单保存成功与否，都需要保证日志记录能够记录成功。

grep console插件 日志过滤筛选

AOP：AspectOrientedProgramming（面向切面编程、面向方面编程），其实就是面向特定方法编程。
动态代理是面向切面编程最主流的实现。而SpringAOP是Spring框架的高级技术，旨在管理bean对象的过程中，主要通过底层的动态代理机制，对特定的方法进行编程。
场景：记录操作日志、权限控制、事务管理...
优势：代码无侵入、减少重复代码、提高开发效率、维护方便

AOP核心概念
连接点：JoinPoint，可以被AOP控制的方法（暗含方法执行时的相关信息）
通知：Advice，指那些重复的逻辑，也就是共性功能（最终体现为一个方法）
切入点：PointCut，匹配连接点的条件，通知仅会在切入点方法执行时被应用
切入点是连接点的子集
切面：Aspect，描述通知与切入点的对应关系（通知+切入点）
目标对象：Target，通知所应用的对象

起步依赖
<!--AOP-->
<dependency>
<groupId>org.springframework.boot</groupId>
<artifactId>spring-boot-starter-aop</artifactId>
</dependency>

@Component
@Aspect
@slf4j
public class TimeAspect {
	//             *(任意返回值)            (包).*(所有的接口和类).*(所有的方法)(任意形参)               
	@Around("execution(* com.itheima.service.impl.*.*(..))")
	public Object recordTime(ProceedingJoinPoint joinPoint)throws Throwable {
		long begin = System.currentTimeMillis();
		//调用原始操作
		Object result = joinPoint.proceed();
		long end = System.currentTimeMillis() ;
		log.info("执行耗时：{}) ms", (end-begin));
		return result;
	}
}

底层自动生成代理对象，注入的是这个代理对象

通知类型
1.@Around（重点）：环绕通知，此注解标注的通知方法在目标方法前、后都被执行
2.@Before：前置通知，此注解标注的通知方法在目标方法前被执行
3.@After：后置通知，此注解标注的通知方法在目标方法后被执行，无论是否有异常都会执行
4.@AfterReturning：返回后通知，此注解标注的通知方法在目标方法后被执行，有异常不会执行
5.@AfterThrowing：异常后通知，此注解标注的通知方法发生异常后执行
注意事项
@Around环绕通知需要自己调用ProceedingJoinPoint.proceed()来让原始方法执行，其他通知不需要考虑目标方法执行
@Around环绕通知方法的返回值，必须指定为Object，来接收原始方法的返回值。

抽取切入点表达式
@Pointcut("execution(* com.itheima.service.impl.DeptServiceImpl.*(..))")
private void pt(){}
@Around("pt()")

private：仅能在当前切面类中引用该表达式
public：在其他外部的切面类中也可以引用该表达式

1.不同切面类中，默认按照切面类的类名字母排序：
目标方法前的通知方法：字母排名靠前的先执行
目标方法后的通知方法：字母排名靠前的后执行
2.用@Order(数字)加在切面类上来控制顺序
目标方法前的通知方法：数字小的先执行
目标方法后的通知方法：数字小的后执行

execution主要根据方法的返回值、包名、类名、方法名、方法参数等信息来匹配，语法为：
execution(访问修饰符? 返回值 包名.类名.?方法名(方法参数）throws 异常?)
其中带？的表示可以省略的部分
访问修饰符：可省略（比如：public、protected)
包名.类名：可省略
throws异常：可省略（注意是方法上声明抛出的异常，不是实际抛出的异常）

可以使用通配符描述切入点
*：单个独立的任意符号，可以通配任意返回值、包名、类名、方法名、任意类型的一个参数，也可以通配包、类、方法名的一部分
execution(* com.*.service.*.update*(*))
·：多个连续的任意符号，可以通配任意层级的包，或任意类型、任意个数的参数
execution(* com.itheima..DeptService.*(..))
根据业务需要，可以使用且（&&）、或（Il)、非（!)来组合比较复杂的切入点表达式。

书写建议
所有业务方法名在命名时尽量规范，方便切入点表达式快速匹配。如：查询类方法都是find开头，更新类方法都是update开头。
描述切入点方法通常基于接口描述，而不是直接描述实现类，增强拓展性。
在满足业务需要的前提下，尽量缩小切入点的匹配范围。如：包名匹配尽量不使用.使用*匹配单个包。

@annotation切入点表达式，用于匹配标识有特定注解的方法。
@annotation(com.itheima.anno.Log)

aop包里新建一个注解MyLog
@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.METHOD)
public @interface MyLog {}
再在要用的方法上标@MyLog，然后@PointCut切入点表达式写@annotation(com.itheima.anno.MyLog)

在Spring中用JoinPoint抽象了连接点，用它可以获得方法执行时的相关信息，如目标类名、方法名、方法参数等。
对于@Around通知，获取连接点信息只能使用ProceedingJoinPoint
对于其他四种通知，获取连接点信息只能使用JoinPoint，它是ProceedingJoinPoint的父类型

String className = joinPoint.getTarget().getClass().getName(); //获取目标类名
Signature signature = joinPoint.getSignature();//获取目标方法签名
String methodName = joinPoint.getSignature() .getName();//获取目标方法名
Object[] args = joinPoint.getArgs(); //获取目标方法运行参数
写在通知里面的，感觉用不到

优先级(低→高)
application.yaml（忽略)
application.yml
application.properties
java系统属性（-XXX=XXX)
命令行参数（--XXX=XXX)

默认情况下，Spring项目启动时，会把bean都创建好放在lOc容器中，如果想要主动获取这些bean，可以通过如下方式：
根据name获取bean:
Object getBean(String name)
根据类型获取bean:
<T> T getBean (Class<T> requiredType)
根据name获取bean（带类型转换）：
<T> T getBean (String name, Class<T> requiredType)
注意事项：
上述所说的Spring项目启动时，会把其中的bean都创建好，还会受到作用域及延迟初始化影响，这里主要针对于默认的单例
非延迟加载的bean而言。

可以通过@Scope注解来进行配置作用域：
@Scope("prototype")
注意事项：
默认singleton的bean，在容器启动时被创建，可以使用@Lazy注解来延迟初始化（延迟到第一次使用时）。
prototype的bean，每一次使用该bean的时候都会创建一个新的实例。
实际开发当中，绝大部分的Bean是单例的，也就是说绝大部分Bean不需要配置scope属性。

如果要管理的bean对象来自于第三方（不是自定义的），是无法用@Component及衍生注解声明bean的，就需要用到@Bean注解。
若要管理的第三方bean对象，建议对这些bean进行集中分类配置，可以通过@Configuration注解声明一个配置类。
config包里新建一个CommonConfig类
@Configuration //配置类
public class CommonConfig {
	//声明第三方bean
	@Bean	//将当前方法的返回值对象交给IOc容器管理，成为IOc容器bean
			//通过@Bean注解的name/value属性指定bean名称，如果未指定，默认是方法名
			//如果第三方bean需要依赖其它bean对象，直接在bean定义方法中设置形参即可，容器会根据类型自动装配
	public SAXReader reader(DeptService deptService)(
		System.out.println(deptService);
		return new SAXReader();
	}
}

项目中自定义的，使用@Component及其衍生注解
项目中引入第三方的，使用@Bean注解

SpringBoot的自动配置就是当spring容器启动后，一些配置类、bean对象就自动存入到了lOc容器中，不需要我们手动去声明，从而简化了开发，省去了繁琐的配置操作。

自动配置原理
方案一：@ComponentScan组件扫描
方案二：@Import导入。使用@lmport导入的类会被Spring加载到IOc容器中，导入形式主要有以下几种：
导入普通类
导入配置类
导入ImportSelector接口实现类
@EnableXxxx注解，封装@Import注解 （方便、优雅）

@SpringBootApplication
该注解标识在SpringBoot工程引导类上，是SpringBoot中最最最重要的注解。该注解由三个部分组成：
	@SpringBootConfiguration：该注解与@Configuration注解作用相同，用来声明当前也是一个配置类。
	@ComponentScan：组件扫描，默认扫描当前引导类所在包及其子包。
	@EnableAutoConfiguration：SpringBoot实现自动化配置的核心注解。
	
@Conditional
作用：按照一定的条件进行判断，在满足给定条件后才会注册对应的bean对象到SpringIOc容器中。
位置：方法、类
@Conditional本身是一个父注解，派生出大量的子注解：
	@ConditionalOnClass：判断环境中是否有对应字节码文件，才注册bean到IOC容器。
	@ConditionalOnMissingBean:判断环境中没有对应的bean（类型或名称），才注册bean到IOC容器。
	@ConditionalOnProperty:判断配置文件中有对应属性和值，才注册bean到IOc容器。
	
在实际开发中，经常会定义一些公共组件，提供给各个项目团队使用。而在SpringBoot的项目中，一般会将这些公共组件封装为SpringBoot 的 starter。
自定义starter看视频吧。。。

maven高级跳了