Redis是一个基于内存的key-value结构数据库。
基于内存存储，读写性能高
适合存储热点数据（热点商品、资讯、新闻）
企业应用广泛

Redis存储的是key-value结构的数据，其中key是字符串类型，value有5种常用的数据类型：

字符串(string)：普通字符串，Redis中最简单的数据类型
哈希(hash):也叫散列，类似于Java中的HashMap结构
列表(list)：按照插入顺序排序，可以有重复元素，类似于Java中的LinkedList
集合(set):无序集合，没有重复元素，类似于Java中的HashSet
有序集合(sorted set/zset):集合中每个元素关联一个分数(score)，根据分数升序排序，没有重复元素

Redis字符串类型常用命令：
SET key value
设置指定key的值
GET key
获取指定key的值
SETEX key seconds value
设置指定key的值，并将 key的过期时间设为 seconds秒
SETNX key value
只有在key不存在时设置key的值

Redis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象，常用命令：
HSET key field value
将哈希表key中的字段field的值设为value
HGET key field
获取存储在哈希表中指定字段的值
HDEL key field
删除存储在哈希表中的指定字段
HKEYS key
获取哈希表中所有字段
HVALS key
获取哈希表中所有值

Redis列表是简单的字符串列表，按照插入顺序排序，常用命令：
LPUSH key value1 [value2]
将一个或多个值插入到列表头部
LRANGE key start stop
获取列表指定范围内的元素
RPOP key
移除并获取列表最后一个元素
LLEN key
获取列表长度

Redis set是string类型的无序集合。集合成员是唯一的，集合中不能出现重复的数据，常用命令：
SADD key member1 [member2]
向集合添加一个或多个成员
SMEMBERS key
返回集合中的所有成员
SCARD key
获取集合的成员数
SINTER key1 [key2]
返回给定所有集合的交集
SUNION key1 [key2]
返回所有给定集合的并集
SREM key member1 [member2]
删除集合中一个或多个成员

Redis有序集合是string类型元素的集合，且不允许有重复成员。每个元素都会关联一个double类型的分数，大的在前面。常用命令
ZADD key score1 member1 [score2 member2]
向有序集合添加一个或多个成员
ZRANGE key start stop [WITHSCORES]
通过索引区间返回有序集合中指定区间内的成员
ZINCRBY key increment member
有序集合中对指定成员的分数加上增量increment
ZREM key member [member...]
移除有序集合中的一个或多个成员

Redis的通用命令是不分数据类型的，都可以使用的命令：
KEYS pattern
查找所有符合给定模式(pattern)的key
EXISTS key
检查给定key是否存在
TYPE key
返回key所储存的值的类型
DEL key
该命令用于在 key存在是删除 key

redis的java客户端
Jedis
以Redis命令作为方法名称，学习成本低，简单实用。但是Jedis实例是线程不安全的，多线程环境下需要基于连接池来使用
lettuce
Lettuce是基于Netty实现的，支持同步、异步和响应式编程方式，并且是线程安全的。支持Redis的哨兵模式、集群模式和管道模式。
Redisson
Redisson是一个基于Redis实现的分布式、可伸缩的Java数据结构集合。包含了诸如Map、Queue、Lock、Semaphore、AtomicLong等强大功能

SpringData是Spring中数据操作的模块，包含对各种数据库的集成，其中对Redis的集成模块就叫做SpringDataRedis，官网地址：https://spring.jo/projects/spring-data-redis
• 提供了对不同Redis客户端的整合（Lettuce和Jedis）
• 提供了RedisTemplate统一API来操作Redis
• 支持Redis的发布订阅模型
• 支持Redis哨兵和Redis集群
• 支持基于Lettuce的响应式编程
• 支持基于JDK、JSON、字符串、Spring对象的数据序列化及反序列化
• 支持基于Redis的JDKCollection实现

RedisTemplate可以接收任意Object作为值写入Redis，只不过写入前会把Object序列化为字节形式，默认是采用JDK
序列化
缺点：
• 可读性差
• 内存占用较大
尽管JSON的序列化方式可以满足我们的需求，但依然存在一些问题，为了在反序列化时知道对象的类型，JSON序列化器会将类的class类型写入json结果中，存入Redis，会带来额外的内存开销。
为了节省内存空间，我们并不会使用JSON序列化器来处理value，而是统一使用String序列化器，要求只能存储String类型的key和value。当需要存储Java对象时，手动完成对象的序列化和反序列化。
Spring默认提供了一个StringRedisTemplate类，它的key和value的序列化方式默认就是String方式。省去了我们自定义RedisTemplate的过程

@Autowired
private StringRedisTemplate stringRedisTemplate;
// JSON工具
private static final ObjectMapper mapper = new ObjectMapper () ;
@Test
void testStringTemplate() throws JsonProcessingException
// 准备对象
User user = new User（"虎哥"，18）；
// 手动序列化
String json = mapper.writeValueAsString(user);
// 写入一条数据到redis
stringRedisTemplate.opsForValue() .set("user:200", json);
// 读取数据
String val = stringRedisTemplate.opsForValue ().get ("user:200") ;
// 反序列化
User userl = mapper. readValue(val, User.class);
System.out.println("user1 = " + user1);
}

总结：
RedisTemplate的两种序列化实践方案：
方案一：
1. 自定义RedisTemplate
2. 修改RedisTemplate的序列化器为GenericJackson2JsonRedisSerializer
方案二：
1. 使用StringRedisTemplate
2. 写入Redis时，手动把对象序列化为JSON
3. 读取Redis时，手动把读取到的JSON反序列化为对象

