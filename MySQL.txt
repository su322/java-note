事务四大特性
原子性（Atomicity）：事务是不可分割的最小操作单元，要么全部成功，要么全部失败。
一致性（Consistency）：事务完成时，必须使所有的数据都保持一致状态。
隔离性（Isolation）：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行。
持久性（Durability）：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的。

并发事务问题
脏读：一个事务读到另外一个事务还没有提交的数据。
不可重复读：一个事务先后读取同一条记录，但两次读取的数据不同，称之为不可重复读。
幻读：一个事务按照条件查询数据时，没有对应的数据行，但是在插入数据时，又发现这行数据已经存在，好像出现了“幻影”。

事务隔离级别
隔离级别					赃读	 不可重复读    幻读		
Read uncommitted		 √		 √			√
Read committed			 ×		 √			√ 
Repeatable Read(默认)	 ×		 ×			√
Serializable			 ×		 ×			×
注意：事务隔离级别越高，数据越安全，但是性能越低。

存储引擎就是存储数据、建立索引、更新/查询数据等技术的实现方式。存储引擎是基于表的，而不是基于库的，所以存储引擎也可被称为表类型。

InnoDB
介绍
InnoDB是一种兼顾高可靠性和高性能的通用存储引I擎，在MySQL5.5之后，InnoDB是默认的MySQL存储引擎。
特点
DML操作遵循ACID模型，支持事务；
行级锁，提高并发访问性能;
支持外键FOREIGNKEY约束，保证数据的完整性和正确性;
文件
xXX.ibd：xxx代表的是表名，innoDB引l擎的每张表都会对应这样一个表空间文件，存储该表的表结构(frm、sdi)、数据和索引。
参数:innodb_file_per_table

MyISAM
介绍
MyISAM是MySQL早期的默认存储引擎。
特点
不支持事务，不支持外键
支持表锁，不支持行锁
访问速度快
文件
XXX.sdi:存储表结构信息
XXX.MYD:存储数据
XXX.MYI:存储索引

Memory
介绍
Memory引擎的表数据时存储在内存中的，由于受到硬件问题、或断电问题的影响，只能将这些表作为临时表或缓存使用。
特点
内存存放
hash索引（默认）
文件
XXX.sdi：存储表结构信息


主键索引
针对于表中主键创建的索引
唯一索引
避免同一个表中某数据列中的值重复
常规索引
快速定位特定数据
全文索引
全文索引查找的是文本中的关键词，而不是比较索引中的值

在InnoDB存储引擎中，根据索引的存储形式，又可以分为以下两种：
聚集索引(Clustered Index)
将数据存储与索引放到了一块，索引结构的叶子节点保存了行数据
必须有，而且只有一个
二级索引(Secondary Index)
将数据与索引分开存储，索引结构的叶子节点关联的是对应的主键
可以存在多个

当前读
读取的是记录的最新版本，读取时还要保证其他并发事务不能修改当前记录，会对读取的记录进行加锁。对于我们日常的操作，如：select... lock in share mode(共享锁), select...for update、update、insert、delete(排他锁)都是一种当前读。
快照读
简单的select（不加锁）就是快照读，快照读，读取的是记录数据的可见版本，有可能是历史数据，不加锁，是非阻塞读。
Read Committed：每次select,都生成一个快照读。
RepeatableRead：开启事务后第一个select语句才是快照读的地方。
Serializable：快照读会退化为当前读。
MVCC
全称Multi-VersionConcurrencyControl，多版本并发控制。指维护一个数据的多个版本，使得读写操作没有冲突，快照读为MySQL实现MVCC提供了一个非阻塞读功能。MVCC的具体实现，还需要依赖于数据库记录中的三个隐式字段、undolog日志、readView。

隐藏字段
含义
DB_TRX_ID
最近修改事务ID，记录插入这条记录或最后一次修改该记录的事务ID。
DB_ROLL_PTR
回滚指针，指向这条记录的上一个版本，用于配合undolog，指向上一个版本。
DB_ROW_ID
隐藏主键，如果表结构没有指定主键，将会生成该隐藏字段。

undo log
回滚日志，在insert、update、delete的时候产生的便于数据回滚的日志。
当insert的时候，产生的undolog日志只在回滚时需要，在事务提交后，可被立即删除。
而update、delete的时候，产生的undolog日志不仅在回滚时需要，在快照读时也需要，不会立即被删除。

undo log 版本链
不同事务或相同事务对同一条记录进行修改，会导致该记录的undo log生成一条记录版本链表，链表的头部是最新的旧记录，链表尾部是最早的旧记录。

readview
ReadView（读视图）是快照读SQL执行时MVCC提取数据的依据，记录并维护系统当前活跃的事务（未提交的）id。
ReadView中包含了四个核心字段：
m_ids
当前活跃的事务ID集合
min_trx_id
最小活跃事务ID
max_trx_id
预分配事务ID，当前最大事务ID+1（因为事务ID是自增的)
creator_trx_id
ReadView创建者的事务ID

版本链数据访问规则（trx_id：代表是当前事务ID）
1. trx_id== creator_trx_id？可以访问该版本
成立，说明数据是当前这个事务更改的。
2. trx_id< min_trx_id？可以访问该版本
成立，说明数据已经提交了。
3. trx_id>=max_trx_id？不可以访问该版本
成立，说明该事务是在ReadView生成后才开启。
4. min_trx_id<= trx_id<= max_trx_id？如果trx_id不在m_ids中是可以访问该版本的
成立，说明数据已经提交。

不同的隔离级别，生成ReadView的时机不同：
READ COMMITTED：在事务中每一次执行快照读时生成ReadView。
REPEATABLE READ：仅在事务中第一次执行快照读时生成ReadView，后续复用该ReadView。

